(self["webpackChunkxstarter_frontend"]=self["webpackChunkxstarter_frontend"]||[]).push([[221],{15221:(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>W});var n=r(83673);const s={class:"q-my-lg"};function o(e,t,r,o,a,i){const l=(0,n.up)("StoreDexTrades"),c=(0,n.up)("q-page");return(0,n.wg)(),(0,n.j4)(c,{class:"flex flex-center"},{default:(0,n.w5)((()=>[(0,n._)("div",s,[(0,n.Wm)(l)])])),_:1})}r(10071);var a=r(61959),i=r(76638),l=r(33437),c=r(62323);const d={class:"row"},u={class:"full-width justify-center col-12 row q-mt-md"},h={class:"col-12 justify-center row"},m={key:0,class:"col-12"},g={key:1,class:"q-gutter-y-lg col-12"},y=(0,n._)("br",null,null,-1),k=(0,n._)("br",null,null,-1),p=(0,n._)("br",null,null,-1),f=(0,n._)("br",null,null,-1);function b(e,t,r,s,o,a){const i=(0,n.up)("q-btn");return(0,n.wg)(),(0,n.iD)("div",d,[(0,n._)("div",u,[(0,n._)("div",h,[(0,n.Wm)(i,{label:"listen for volume",outline:"",onClick:e.listenAndFilterTransaction},null,8,["onClick"]),(0,n.Wm)(i,{label:"Compute",outline:"",onClick:e.computeVolume},null,8,["onClick"]),(0,n.Wm)(i,{label:"Compute Paginate",outline:"",onClick:e.computeVolumePaginated},null,8,["onClick"])])]),e.listeningDate?((0,n.wg)(),(0,n.iD)("div",m," Started Listening "+(0,c.zw)(e.listeningDate),1)):(0,n.kq)("",!0),e.tokenAndVolume.length?((0,n.wg)(),(0,n.iD)("div",g,[((0,n.wg)(!0),(0,n.iD)(n.HY,null,(0,n.Ko)(e.tokenAndVolumeSorted,(t=>((0,n.wg)(),(0,n.iD)("div",{class:"text-center",key:t.tokenAddr},[(0,n.Uk)(" Token Address : "+(0,c.zw)(t.tokenAddr)+" ",1),y,(0,n.Uk)(" Sell Volume: "+(0,c.zw)(e.$ethers.utils.formatEther(t.sellVolume.toString()))+" ",1),k,(0,n.Uk)(" Buy Volume: "+(0,c.zw)(e.$ethers.utils.formatEther(t.buyVolume.toString())),1),p,(0,n.Uk)(" total: "+(0,c.zw)(e.$ethers.utils.formatEther(t.total.toString())),1),f,(0,n.Uk)(" net: "+(0,c.zw)(e.$ethers.utils.formatEther(t.net.toString()))+" ",1),(0,n.Wm)(i,{flat:"",label:"view on BscScan",onClick:r=>e.openLink(`https://bscscan.com/token/${t.tokenAddr}`)},null,8,["onClick"])])))),128))])):(0,n.kq)("",!0)])}r(7098);var w=r(81830),v=r(40019);const A=["function balanceOf(address owner) view returns (uint256 balance)","function totalSupply() view returns (uint)","function name() view  returns (string)","function symbol() view returns (string)"],T=["function balanceOf(address owner) view returns (uint256 balance)","function totalSupply() view returns (uint)","function name() view  returns (string)","function symbol() view returns (string)"],C=["event PairCreated(address indexed token0, address indexed token1, address pair, uint)","function getPair(address tokenA, address tokenB) view returns (address pair)","function allPairs(uint) view returns (address pair)"],P=["function balanceOf(address owner) view returns (uint256 balance)","function totalSupply() view returns (uint)","function name() view  returns (string)","function symbol() view returns (string)","function getReserves() view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast)"],E=(0,n.aZ)({name:"StoreDexTrades",setup(){const e=(0,n.f3)("$getProvider"),t=(0,n.f3)("$getSigner"),r=(0,n.f3)("$getLaunchPadContract"),s=(0,n.f3)("$connectedAccounts");let o=(0,n.f3)("$chainId");const l=(0,n.f3)("$getConnectedAndPermissioned"),c=i.ethers.utils.getAddress("0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c"),d=new i.ethers.providers.JsonRpcProvider("https://bsc-dataseed.binance.org/"),u=()=>d,h=new i.ethers.utils.Interface(w.A7),m=()=>h,g=new i.ethers.utils.Interface(w.af),y=()=>g,k=i.ethers.utils.getAddress("0x10ED43C718714eb63d5aA57B78B54704E256024E"),p=new i.ethers.Contract(k,T,d),f=()=>p,b=new i.ethers.Contract("0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73",C,d),P=()=>b,E=e=>new i.ethers.Contract(e,A,d);return v.log("provider is ",e()),{getProvider:e,getLocalProvider:u,getPCakeRouter:f,getPCakeRouterInterface:m,getPCakePairInterface:y,getPCakeFactory:P,getERC20Contract:E,getSigner:t,getLaunchPadContract:r,getConnectedAndPermissioned:l,connectedAccount:s,chainId:o,pCakeRouterAddr:k,current:(0,a.iH)(1),WETH:c}},data(){return{arrayOfTxs:[],minAmtInEthers:5,searchHistoric:!0,symbolFilter:"",arrayOfFilteredDexPairByAmount:[],arrayOfFilteredDexPairBySymbol:[],arrayOfERC20:[],tokenWithIndex:{},tokenAndVolume:[],currentBlockNumber:0,provider:null,listeningDate:null,dbName:"BlockchainData",objectStoreName:"DexTrades"}},computed:{tokenAndVolumeSorted(){return this.currentBlockNumber,[...this.tokenAndVolume].sort((function(e,t){return t.net-e.net})).slice(0,100)}},methods:{openLink(e){(0,l.Z)(e)},async computeVolume(){const e=this.getCurrentHourTimestamp(!0);v.log("currenthourtimestamp",e-1),await this.$indexDBFactory.getNumberedIndexByRange(this.dbName,this.objectStoreName,"timestamp",e-7201,e+3601,this.calculateAndPopulateData)},async computeVolumePaginated(){const e=this.getCurrentHourTimestamp(!0);v.log("currenthourtimestamp",e-1),await this.$indexDBFactory.getPaginatedNumberedIndexByRange(this.dbName,this.objectStoreName,"timestamp",1633741200,1633748400,30,this.calculateAndPopulateAllData)},getCurrentHourTimestamp(e){const t=new Date;return t.setMinutes(0,0,0),v.log("time is",t.getTime()),e?Math.floor(t.getTime()/1e3):t.getTime()},async calculateAndPopulateData(e){v.log("data is "),"undefined"===typeof this.tokenWithIndex[e.tokenAddr]&&(this.tokenWithIndex[e.tokenAddr]=this.tokenAndVolume.push({tokenAddr:e.tokenAddr,buyVolume:i.ethers.BigNumber.from(0),sellVolume:i.ethers.BigNumber.from(0),total:i.ethers.BigNumber.from(0),net:i.ethers.BigNumber.from(0)})-1);const t=this.tokenWithIndex[e.tokenAddr];this.tokenAndVolume[t].sellVolume=this.tokenAndVolume[t].sellVolume.add(e.sellVolume),this.tokenAndVolume[t].buyVolume=this.tokenAndVolume[t].buyVolume.add(e.buyVolume),this.tokenAndVolume[t].total=this.tokenAndVolume[t].total.add(e.buyVolume).add(e.sellVolume),this.tokenAndVolume[t].net=this.tokenAndVolume[t].net.sub(e.sellVolume).add(e.buyVolume)},async calculateAndPopulateAllData(e){v.log("data is ",e);for(let t=0;t<e.length-1;t++){const r=e[t];"undefined"===typeof this.tokenWithIndex[r.tokenAddr]&&(this.tokenWithIndex[r.tokenAddr]=this.tokenAndVolume.push({tokenAddr:r.tokenAddr,buyVolume:i.ethers.BigNumber.from(0),sellVolume:i.ethers.BigNumber.from(0),total:i.ethers.BigNumber.from(0),net:i.ethers.BigNumber.from(0)})-1);const n=this.tokenWithIndex[r.tokenAddr];this.tokenAndVolume[n].sellVolume=this.tokenAndVolume[n].sellVolume.add(r.sellVolume),this.tokenAndVolume[n].buyVolume=this.tokenAndVolume[n].buyVolume.add(r.buyVolume),this.tokenAndVolume[n].total=this.tokenAndVolume[n].total.add(r.buyVolume).add(r.sellVolume),this.tokenAndVolume[n].net=this.tokenAndVolume[n].net.sub(r.sellVolume).add(r.buyVolume)}},async listenAndFilterTransaction(){v.log("trying to listen");const e=this.getLocalProvider();v.log("provider is",e),e.on("block",(async t=>{this.currentBlockNumber=t;const r=await e.getBlockWithTransactions(t);this.getTxRouterAddress(r)})),this.listeningDate=new Date},async getTxRouterAddress(e){const t=e.transactions,r=e.timestamp,n=[];for(const s of t)if(s.to===this.pCakeRouterAddr){const e=this.getPCakeRouterInterface(),t=e.parseTransaction(s),o=t.name;switch(o){case"swapExactTokensForETH":await this.storeSwapExactTokensForETH(t,r,n);break;case"swapExactTokensForETHSupportingFeeOnTransferTokens":await this.storeSwapExactTokensForETH(t,r,n);break;case"swapETHForExactTokens":await this.storeSwapETHForExactTokens(t,r,n);break;case"swapExactETHForTokens":await this.storeSwapETHForExactTokens(t,r,n);break;case"swapExactETHForTokensSupportingFeeOnTransferTokens":await this.storeSwapETHForExactTokens(t,r,n);break;default:v.log("it other",o,t)}}v.log("formated dat is",n),this.$indexDBFactory.addData(this.dbName,this.objectStoreName,n,(e=>{}),(e=>{v.log("on error",e)}))},async storeSwapExactTokensForETH(e,t,r){const n=e.args.path[0];w.Ig[n]||r.push({tokenAddr:n,timestamp:t,buyVolume:i.ethers.BigNumber.from(0),sellVolume:e.args.amountOutMin})},async storeSwapETHForExactTokens(e,t,r){const n=e.args.path[e.args.path.length-1];w.Ig[n]||r.push({tokenAddr:n,timestamp:t,buyVolume:e.value,sellVolume:i.ethers.BigNumber.from(0)})},async filterCakePairTx(e){v.log(e);for(const t of e)if(t.to!==this.pCakeRouterAddr){v.log("tx is",t);const e=this.getPCakeRouterInterface(),r=e.parseTransaction(t);v.log("decoded data is",r);break}},async listenForBSCTransaction(){const e=new this.$ethers.providers.JsonRpcProvider("https://bsc-dataseed.binance.org/");v.log("provider is",e),e.on("pending",(e=>{v.log("tx creates is",e.creates,e.hash),e.creates&&this.arrayOfTxs.push({hash:e.hash,creates:e.creates})})),v.log("provider is",e)},async listenAndFilterPairCreatedByWETHReserve(){if(this.searchHistoric){v.log("min amout str",this.minAmtInEthers);const e=i.ethers.utils.parseEther(this.minAmtInEthers.toString());v.log("big number for ethers",e);let t=await this.getHistoricPairCreatedEvents();await this.filterHistoryPairEventsByLiquidity(t,e)}},async listenAndFilterPairCreatedBySymbol(){if(this.searchHistoric){let e=await this.getHistoricPairCreatedEvents();await this.filterHistoryPairEventsBySymbol(e)}this.filterRealtimePairEventsBySymbol()},async getHistoricPairCreatedEvents(){const e=this.getPCakeFactory(),t=await e.queryFilter("PairCreated",-5e3,"latest");return t},async filterHistoryPairEventsByLiquidity(e=[],t){v.log("events in history filter is",e);for(let r=0;r<e.length;r++){let n=e[r],s=await n.decode(n.data,n.topics);s.token1===this.WETH?(v.log("token 1 is weth",s.token1===this.WETH,s.token0,this.WETH),this.queryAndFilterPairByAmount(s.pair,t,s.token0,"reserve1")):s.token0===this.WETH&&(v.log("token 0 is weth",s.token0===this.WETH,s.token1,this.WETH),this.queryAndFilterPairByAmount(s.pair,t,s.token1,"reserve0"))}},async queryAndFilterPairByAmount(e,t,r,n){const s=await this.queryPairForReserves(e);v.log("reserves is",s,s[n].gte(t)),s[n].gte(t)?this.arrayOfFilteredDexPairByAmount.push({pairAddr:e,tokenAddr:r,WETHBal:i.ethers.utils.formatEther(s[n]),reserveName:n}):v.log("not greater than ",this.minAmtInEthers)},async filterHistoryPairEventsBySymbol(e=[]){v.log("events in history filter is",e);const t=this.symbolFilter.toUpperCase();for(let r=0;r<e.length;r++){let n=e[r],s=await n.decode(n.data,n.topics);s.token1===this.WETH?this.queryAndFilterPairBySymbol(s.pair,t,s.token0):s.token0===this.WETH&&this.queryAndFilterPairBySymbol(s.pair,t,s.token1)}},async filterRealtimePairEventsBySymbol(){const e=this.getPCakeFactory();v.log("starting listen for event and filter by symbol"),e.on("PairCreated",(async(e,t,r,n,s)=>{const o=this.symbolFilter.toUpperCase();t===this.WETH?await this.queryAndFilterPairBySymbol(r,o,e):e===this.WETH&&await this.queryAndFilterPairBySymbol(r,o,t)})),v.log("listen for event and filter by symbol started")},async queryAndFilterPairBySymbol(e,t,r){const n=this.getERC20Contract(r),s=await n.symbol();if(s.toUpperCase()===t){const t=await n.name();this.arrayOfFilteredDexPairBySymbol.push({pairAddr:e,tokenAddr:r,symbol:s,name:t})}else v.log(`tokensymbol not equals to ${t} but rather: ${s.toUpperCase()}`,e)},async queryPairForReserves(e){const t=new i.ethers.Contract(e,P,this.getLocalProvider());return v.log("pair Address for",t),await t.getReserves()}},mounted(){this.$indexDBFactory.setupDatabaseAndObjectStore(this.dbName,this.objectStoreName,null,[["tokenAddr",!1],["buyVolume",!1],["sellVolume",!1],["timestamp",!1]])}});var V=r(48240),x=r(34842),B=r(7518),S=r.n(B);E.render=b;const F=E;S()(E,"components",{QBtn:V.Z,QInput:x.Z});var H=r(40019);const D=["function balanceOf(address owner) view returns (uint256 balance)","function totalSupply() view returns (uint)","function name() view  returns (string)","function symbol() view returns (string)"],I=(0,n.aZ)({name:"TradingTools",components:{StoreDexTrades:F},setup(){const e=(0,n.f3)("$getProvider"),t=(0,n.f3)("$getSigner"),r=(0,n.f3)("$getLaunchPadContract"),s=(0,n.f3)("$connectedAccounts");let o=(0,n.f3)("$chainId");const l=(0,n.f3)("$getConnectedAndPermissioned"),c=new i.ethers.providers.JsonRpcProvider("https://bsc-dataseed.binance.org/"),d=()=>c,u=new i.ethers.Contract("0x10ED43C718714eb63d5aA57B78B54704E256024E",D,c),h=()=>u;return H.log("provider is ",e()),{getProvider:e,getLocalProvider:d,getPCakeRouter:h,getSigner:t,getLaunchPadContract:r,getConnectedAndPermissioned:l,connectedAccount:s,chainId:o,current:(0,a.iH)(1)}},data(){return{arrayOfTxs:[],arrayOfERC20:[],erc20ABI:["function balanceOf(address owner) view returns (uint256 balance)","function totalSupply() view returns (uint)","function name() view  returns (string)","function symbol() view returns (string)"],provider:null}},methods:{openLink(e){(0,l.Z)(e)},async listenForTransaction(){const e=this.getProvider();H.log("provider is",e),e.on("pending",(e=>{H.log("tx creates is",e.creates),this.creates&&this.arrayOfTxs.push({hash:e.hash,creates:e.creates})})),H.log("provider is",e)},async listenForBSCTransaction(){const e=new this.$ethers.providers.JsonRpcProvider("https://bsc-dataseed.binance.org/");H.log("provider is",e),e.on("pending",(e=>{H.log("tx creates is",e.creates,e.hash),e.creates&&this.arrayOfTxs.push({hash:e.hash,creates:e.creates})})),H.log("provider is",e)},async listenAndFilterTransaction(){const e=this.getLocalProvider();H.log("provider is",e),e.on("block",(async t=>{const r=await e.getBlockWithTransactions(t);this.getTxWithContractCreation(r.transactions)})),H.log("provider is",e)},async getTxWithContractCreation(e){for(const t of e)if(t.creates){H.log("tx creates",t.creates);const e=await this.checkIfERC20(t.creates);this.arrayOfTxs.push(t),e&&this.arrayOfERC20.push({hash:t.hash,tokenAddr:t.creates,name:e})}},async checkIfERC20(e){const t=this.getLocalProvider(),r=new this.$ethers.Contract(e,this.erc20ABI,t);let n;H.log("contract variable created",r);try{n=await r.name()}catch(s){return H.log("not an erc20 token"),null}return H.log("is erc20 name is",n),n}},mounted(){}});var R=r(24379);I.render=o;const W=I;S()(I,"components",{QPage:R.Z,QBtn:V.Z})}}]);