(self["webpackChunkxstarter_frontend"]=self["webpackChunkxstarter_frontend"]||[]).push([[626],{47238:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>se});var a=n(83673),o=n(37400),i=n.n(o),s=n(56607),l=n.n(s);const r={key:0,class:"logo-style",src:i()},d={key:1,class:"logo-style",src:l()},u={class:"q-gutter-x-sm"},p={class:"col-auto"},c={class:"col-12 q-pa-md segoe-bold text-wr text-center"},m=(0,a.Wm)("div",null," Please Manually Switch To The Goerli Network ",-1),y=(0,a.Uk)(" For More Info On How To Switch Manually Click ");function h(e,t,n,o,i,s){const l=(0,a.up)("q-toolbar-title"),h=(0,a.up)("q-btn"),g=(0,a.up)("q-toolbar"),T=(0,a.up)("q-route-tab"),v=(0,a.up)("q-badge"),b=(0,a.up)("q-tabs"),k=(0,a.up)("q-header"),w=(0,a.up)("router-view"),f=(0,a.up)("q-page-container"),x=(0,a.up)("q-footer"),C=(0,a.up)("NoticeModal"),_=(0,a.up)("WalletConnectModal"),A=(0,a.up)("GeneralModal"),M=(0,a.up)("q-layout");return(0,a.wg)(),(0,a.j4)(M,{view:"hHh lpR fFf"},{default:(0,a.w5)((()=>[(0,a.Wm)(k,{elevated:"",class:["text-white q-pt-sm",{"bg-dark":e.$q.dark.isActive,"bg-light":!e.$q.dark.isActive}],"height-hint":"98"},{default:(0,a.w5)((()=>[(0,a.Wm)(g,null,{default:(0,a.w5)((()=>[(0,a.Wm)(l,{style:{width:"10%"}},{default:(0,a.w5)((()=>[(0,a.Wm)("div",null,[e.$q.dark.isActive?((0,a.wg)(),(0,a.j4)("img",r)):((0,a.wg)(),(0,a.j4)("img",d))])])),_:1}),(0,a.Wm)("div",u,[(0,a.Wm)(h,{rounded:"",outline:"",size:e.$q.platform.is.mobile?"sm":"md",label:e.connectBtnLabel,icon:e.metamaskInstalled?void 0:"error_outline",color:e.metamaskInstalled?e.darkLightText:"negative",onClick:e.connectOrInstallBtn},null,8,["size","label","icon","color","onClick"]),(0,a.Wm)(h,{round:"",flat:"",color:e.darkLightText,icon:e.$q.dark.isActive?"light_mode":"dark_mode",onClick:e.setDarkMode},null,8,["color","icon","onClick"])])])),_:1}),(0,a.Wm)(b,{align:"center",class:{"text-dark":!e.$q.dark.isActive,"text-light":e.$q.dark.isActive}},{default:(0,a.w5)((()=>[(0,a.Wm)(T,{to:"/",label:"ILO"}),(0,a.Wm)(T,{to:"/gov",label:"Governance"},{default:(0,a.w5)((()=>[(0,a.Wm)(v,{label:"Coming Soon",color:e.darkLightText,"text-color":e.darkLightTextReverse,style:{"font-size":"8px"},floating:""},null,8,["color","text-color"])])),_:1}),(0,a.Wm)(T,{to:"/nft",label:"NFT"},{default:(0,a.w5)((()=>[(0,a.Wm)(v,{label:"Coming Soon",color:e.darkLightText,"text-color":e.darkLightTextReverse,style:{"font-size":"8px"},floating:""},null,8,["color","text-color"])])),_:1})])),_:1},8,["class"])])),_:1},8,["class"]),(0,a.Wm)(f,null,{default:(0,a.w5)((()=>[(0,a.Wm)(w)])),_:1}),(0,a.Wm)(x,{elevated:"",class:["text-white",{"bg-dark":e.$q.dark.isActive,"bg-light":!e.$q.dark.isActive}]},{default:(0,a.w5)((()=>[(0,a.Wm)(g,{class:"justify-center"},{default:(0,a.w5)((()=>[(0,a.Wm)("div",p,[(0,a.Wm)(h,{flat:"",color:e.darkLightText,label:"About xStarter",target:"_blank","icon-right":"open_in_new",type:"a",href:"https://www.xstarter.org/"},null,8,["color"])])])),_:1})])),_:1},8,["class"]),e.showNotice?((0,a.wg)(),(0,a.j4)(C,{key:0,modelValue:e.showNotice,"onUpdate:modelValue":t[1]||(t[1]=t=>e.showNotice=t)},null,8,["modelValue"])):(0,a.ry)("",!0),e.connectedAndPermissioned?(0,a.ry)("",!0):((0,a.wg)(),(0,a.j4)(_,{key:1,modelValue:e.showWalletConnectModal,"onUpdate:modelValue":t[2]||(t[2]=t=>e.showWalletConnectModal=t)},null,8,["modelValue"])),5!==e.chainId?((0,a.wg)(),(0,a.j4)(A,{key:2,modelValue:e.showSwitchChainManual,"onUpdate:modelValue":t[3]||(t[3]=t=>e.showSwitchChainManual=t)},{default:(0,a.w5)((()=>[(0,a.Wm)("div",c,[m,(0,a.Wm)("div",null,[y,(0,a.Wm)(h,{flat:"",type:"a",label:"HERE",style:{"text-decoration":"underline"},href:"https://metamask.zendesk.com/hc/en-us/articles/360043227612-How-to-add-custom-Network-RPC-and-or-Block-Explorer",target:"_blank"})])])])),_:1},8,["modelValue"])):(0,a.ry)("",!0)])),_:1})}n(10071);var g=n(61959),T=n(48825),v=n(76638),b=n(80602),k=n(11990),w=n.n(k),f=n(98580),x=n(81830);const C=JSON.parse('{"Mt":[{"inputs":[{"internalType":"address","name":"xStarterToken_","type":"address"},{"internalType":"address","name":"xStarterDeployer_","type":"address"},{"internalType":"address","name":"xStarterERCDeployer_","type":"address"},{"internalType":"uint256","name":"depositPerProposal_","type":"uint256"},{"internalType":"uint256","name":"minXSTN_","type":"uint256"},{"internalType":"uint256","name":"minXSTNLP_","type":"uint256"},{"internalType":"uint256","name":"blockTime_","type":"uint256"},{"internalType":"address","name":"addressOfDex_","type":"address"},{"internalType":"address","name":"addressOfDexFactory_","type":"address"},{"internalType":"address","name":"admin_","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousAdmin","type":"address"},{"indexed":true,"internalType":"address","name":"newAdmin","type":"address"}],"name":"AdministrationTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"proposalAddr_","type":"address"},{"indexed":true,"internalType":"address","name":"caller_","type":"address"},{"indexed":true,"internalType":"address","name":"ILO","type":"address"}],"name":"ILODeployed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"proposer","type":"address"},{"indexed":true,"internalType":"address","name":"proposalAddr_","type":"address"}],"name":"ILOProposalRegistered","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"caller_","type":"address"},{"indexed":true,"internalType":"uint256","name":"amount_","type":"uint256"}],"name":"TokensDeposited","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"caller_","type":"address"},{"indexed":true,"internalType":"uint256","name":"amount_","type":"uint256"}],"name":"TokensWithdrawn","type":"event"},{"inputs":[],"name":"_addressOfDex","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"_addressOfDexFactory","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"xStarterGovernance_","type":"address"}],"name":"addGovernance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"xStarterNFT_","type":"address"}],"name":"addNFT","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"admin","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"minXSTN_","type":"uint256"},{"internalType":"uint256","name":"minXSTNLP_","type":"uint256"}],"name":"changeMinTokensRequirements","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"proposalAddr_","type":"address"},{"internalType":"address","name":"ILOAdmin_","type":"address"}],"name":"deployILOContract","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"proposalAddr_","type":"address"}],"name":"deployXstarterILO","outputs":[{"internalType":"address","name":"ILO","type":"address"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"depositApprovedToken","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"addr_","type":"address"}],"name":"depositBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getMinTokensRequirements","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"proposalAddr_","type":"address"}],"name":"getProposal","outputs":[{"components":[{"internalType":"address","name":"proposalAddr","type":"address"},{"components":[{"internalType":"address","name":"proposer","type":"address"},{"internalType":"address","name":"admin","type":"address"},{"internalType":"address","name":"fundingToken","type":"address"},{"internalType":"string","name":"tokenName","type":"string"},{"internalType":"string","name":"tokenSymbol","type":"string"},{"internalType":"string","name":"infoURL","type":"string"},{"internalType":"uint256","name":"totalSupply","type":"uint256"},{"internalType":"uint8","name":"decimals","type":"uint8"},{"internalType":"uint8","name":"percentOfTokensForILO","type":"uint8"},{"internalType":"uint256","name":"blockNumber","type":"uint256"},{"internalType":"uint256","name":"timestamp","type":"uint256"},{"internalType":"bool","name":"isApproved","type":"bool"},{"internalType":"bool","name":"isRegistered","type":"bool"},{"internalType":"bool","name":"isOpen","type":"bool"},{"internalType":"uint256","name":"deployedBlockNumber","type":"uint256"},{"internalType":"uint256","name":"deployedTimestamp","type":"uint256"},{"internalType":"bool","name":"isDeployed","type":"bool"},{"internalType":"address","name":"ILOAddress","type":"address"}],"internalType":"struct ILOProposal","name":"info","type":"tuple"},{"components":[{"internalType":"uint48","name":"contribTimeLock","type":"uint48"},{"internalType":"uint48","name":"liqPairLockLen","type":"uint48"},{"internalType":"uint48","name":"startTime","type":"uint48"},{"internalType":"uint48","name":"endTime","type":"uint48"},{"internalType":"uint256","name":"minPerSwap","type":"uint256"},{"internalType":"uint256","name":"minPerAddr","type":"uint256"},{"internalType":"uint256","name":"maxPerAddr","type":"uint256"},{"internalType":"uint256","name":"softcap","type":"uint256"},{"internalType":"uint256","name":"hardcap","type":"uint256"},{"internalType":"uint256","name":"amountRaised","type":"uint256"},{"internalType":"bool","name":"pairCreated","type":"bool"},{"internalType":"address","name":"liqPairAddr","type":"address"},{"internalType":"address","name":"projectToken","type":"address"},{"internalType":"uint8","name":"percentTokensForTeam","type":"uint8"},{"internalType":"uint8","name":"ILOStatus","type":"uint8"}],"internalType":"struct ILOAdditionalInfo","name":"moreInfo","type":"tuple"}],"internalType":"struct CompactInfo","name":"i_","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"round_","type":"uint256"}],"name":"getProposals","outputs":[{"components":[{"internalType":"address","name":"proposalAddr","type":"address"},{"components":[{"internalType":"address","name":"proposer","type":"address"},{"internalType":"address","name":"admin","type":"address"},{"internalType":"address","name":"fundingToken","type":"address"},{"internalType":"string","name":"tokenName","type":"string"},{"internalType":"string","name":"tokenSymbol","type":"string"},{"internalType":"string","name":"infoURL","type":"string"},{"internalType":"uint256","name":"totalSupply","type":"uint256"},{"internalType":"uint8","name":"decimals","type":"uint8"},{"internalType":"uint8","name":"percentOfTokensForILO","type":"uint8"},{"internalType":"uint256","name":"blockNumber","type":"uint256"},{"internalType":"uint256","name":"timestamp","type":"uint256"},{"internalType":"bool","name":"isApproved","type":"bool"},{"internalType":"bool","name":"isRegistered","type":"bool"},{"internalType":"bool","name":"isOpen","type":"bool"},{"internalType":"uint256","name":"deployedBlockNumber","type":"uint256"},{"internalType":"uint256","name":"deployedTimestamp","type":"uint256"},{"internalType":"bool","name":"isDeployed","type":"bool"},{"internalType":"address","name":"ILOAddress","type":"address"}],"internalType":"struct ILOProposal","name":"info","type":"tuple"},{"components":[{"internalType":"uint48","name":"contribTimeLock","type":"uint48"},{"internalType":"uint48","name":"liqPairLockLen","type":"uint48"},{"internalType":"uint48","name":"startTime","type":"uint48"},{"internalType":"uint48","name":"endTime","type":"uint48"},{"internalType":"uint256","name":"minPerSwap","type":"uint256"},{"internalType":"uint256","name":"minPerAddr","type":"uint256"},{"internalType":"uint256","name":"maxPerAddr","type":"uint256"},{"internalType":"uint256","name":"softcap","type":"uint256"},{"internalType":"uint256","name":"hardcap","type":"uint256"},{"internalType":"uint256","name":"amountRaised","type":"uint256"},{"internalType":"bool","name":"pairCreated","type":"bool"},{"internalType":"address","name":"liqPairAddr","type":"address"},{"internalType":"address","name":"projectToken","type":"address"},{"internalType":"uint8","name":"percentTokensForTeam","type":"uint8"},{"internalType":"uint8","name":"ILOStatus","type":"uint8"}],"internalType":"struct ILOAdditionalInfo","name":"moreInfo","type":"tuple"}],"internalType":"struct CompactInfo[]","name":"","type":"tuple[]"},{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"proposalAddr_","type":"address"}],"name":"isDeployed","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"noOfProposals","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"proposalAddr_","type":"address"}],"name":"registerILOProposal","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceAdministration","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"setTokenAndLPAddr","outputs":[{"internalType":"address","name":"xStarterToken_","type":"address"},{"internalType":"address","name":"xStarterLP_","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newAdmin","type":"address"}],"name":"transferAdministration","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount_","type":"uint256"}],"name":"withdrawTokens","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"xStarterContracts","outputs":[{"internalType":"address[5]","name":"","type":"address[5]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"xStarterDEXUsed","outputs":[{"internalType":"address","name":"dexAddress","type":"address"},{"internalType":"address","name":"dexFactoryAddress","type":"address"}],"stateMutability":"view","type":"function"}]}'),_=(0,a.HX)("data-v-0027a424");(0,a.dD)("data-v-0027a424");const A={class:"column full-height content-center justify-center"},M=(0,a.Wm)("div",{class:"q-mb-xl segoe-bold text-h4 text-center"}," Connect To Start Using xStarter ",-1),q={class:"row full-width content-center justify-center q-px-md q-mt-lg"},L=(0,a.Wm)("div",{class:"text-h5 text-bold text-center q-my-lg"}," -- OR -- ",-1),P={class:"row full-width content-center justify-center q-px-md "};(0,a.Cn)();const I=_(((e,t,n,o,i,s)=>{const l=(0,a.up)("q-btn"),r=(0,a.up)("GeneralModal"),d=(0,a.Q2)("close-popup");return(0,a.wg)(),(0,a.j4)(r,{modelValue:e.showDialog,"onUpdate:modelValue":t[1]||(t[1]=t=>e.showDialog=t)},{default:_((()=>[(0,a.Wm)("div",A,[M,(0,a.Wm)("div",q,[(0,a.Wm)(l,{outline:"",label:"Connect With Metamask",color:e.metamaskInstalled?e.darkLightText:"negative",disable:!e.metamaskInstalled,style:{"min-height":"50px","border-radius":"10px"},class:"col-lg-auto col-12 segoe-bold text-12",onClick:e.connectEthereum,icon:"img:metamask.svg"},null,8,["color","disable","onClick"])]),L,(0,a.Wm)("div",P,[(0,a.wy)((0,a.Wm)(l,{outline:"",label:"Connect With WalletConnect",color:e.metamaskInstalled?e.darkLightText:"negative",disable:!e.metamaskInstalled,style:{"min-height":"50px","border-radius":"10px"},class:"col-lg-auto col-12 segoe-bold text-12",onClick:e.connectEthereumWalletConnect,icon:"img:walletconnect_logo.svg"},null,8,["color","disable","onClick"]),[[d]])])])])),_:1},8,["modelValue"])}));var W=n(99609);const $=(0,a.aZ)({name:"WalletConnectModal",setup(){const e=(0,a.f3)("$connectEthereum"),t=(0,a.f3)("$connectEthereumWalletConnect"),n=(0,a.f3)("$metamaskInstalled");return{connectEthereum:e,connectEthereumWalletConnect:t,metamaskInstalled:n}},components:{GeneralModal:W.Z},props:{modelValue:{type:Boolean,required:!0},persistent:{type:Boolean,default:!1}},computed:{showDialog:{set:function(e){this.$emit("update:modelValue",e)},get:function(){return this.modelValue}},darkLightText(){return this.$q.dark.isActive?"light":"dark"},darkLightTextReverse(){return this.$q.dark.isActive?"dark":"light"}}});var S=n(48240),J=n(60677),O=n(7518),N=n.n(O);$.render=I,$.__scopeId="data-v-0027a424";const R=$;N()($,"components",{QBtn:S.Z}),N()($,"directives",{ClosePopup:J.Z});const D=(0,a.HX)("data-v-08273046");(0,a.dD)("data-v-08273046");const E={class:"row content-center justify-center"},B=(0,a.Wm)("div",{class:"q-mb-xl segoe-bold text-h4 text-center"}," Disclaimer ",-1),Z=(0,a.Wm)("div",{class:"q-mb-md q-px-xl text-body1 text-center"}," xStarter is a decentralized and community governed initial liquidity offering (ILO) platform. Anyone can propose an ILO and the community then votes to accept or reject the proposal. This shouldn't be taken as a form of due diligence and each person using this platform must understand the risk involved in the decentralized nature fo cryptocurrencies. You assume all risk involved in using this platform and agree to do your own research and due diligence before using this platform ",-1),V=(0,a.Wm)("div",{class:"q-mb-md segoe-bold q-pa-xl text-body1 text-center"}," You assume all risk involved in using this platform and agree to do your own research and due diligence before using this platform ",-1);(0,a.Cn)();const j=D(((e,t,n,o,i,s)=>{const l=(0,a.up)("q-btn"),r=(0,a.up)("GeneralModal");return(0,a.wg)(),(0,a.j4)(r,{modelValue:e.showDialog,"onUpdate:modelValue":t[1]||(t[1]=t=>e.showDialog=t),persistent:!0},{default:D((()=>[(0,a.Wm)("div",E,[B,Z,V,(0,a.Wm)("div",null,[(0,a.Wm)(l,{outline:"",size:"lg",label:"I Agree",color:e.darkLightText,onClick:e.acceptRisk},null,8,["color","onClick"])])])])),_:1},8,["modelValue"])})),H=(0,a.aZ)({name:"NoticeModal",components:{GeneralModal:W.Z},props:{modelValue:{type:Boolean,required:!0},persistent:{type:Boolean,default:!1}},methods:{emitModalValue(e){this.$emit("update:modelValue",e)},acceptRisk(){this.$q.sessionStorage.set("accRK",!0),this.emitModalValue(!1)}},computed:{darkLightText(){return this.$q.dark.isActive?"light":"dark"},showDialog:{set:function(e){this.emitModalValue(e)},get:function(){return this.modelValue}}}});H.render=j,H.__scopeId="data-v-08273046";const U=H;N()(H,"components",{QBtn:S.Z});var F=n(43797),Q=n(40019);const G=(0,a.aZ)({name:"MainLayout",components:{NoticeModal:U,GeneralModal:W.Z,WalletConnectModal:R},setup(){const e=(0,T.Z)(),t=async()=>{e.dark.toggle()};let n;Q.log("xstarter constructor abi",b.abiUtils.getConstructorObj(C.Mt));const o=e.localStorage.getItem("walletconnect");let i,s,l=(0,g.iH)(o?"walletconnect":"metamask");(0,a.JJ)("$connectMethodToUse",l);let r=(0,g.iH)(!1);const d=(0,g.iH)(!1);(0,a.JJ)("$launchPadLoaded",r);let u=(0,g.iH)(x.qg);(0,a.JJ)("$jsonRPCEndpoint",u);const p=(0,g.iH)(void 0),c=(0,g.iH)(void 0);(0,a.JJ)("$ethereumProvider",p);let m=(0,g.iH)(void 0);(0,a.JJ)("$chainId",m);let y=(0,g.iH)({timestamp:0,blockNumber:0});(0,a.JJ)("$blockInfo",y);const h=(0,g.iH)(!1);(0,a.JJ)("$metamaskInstalled",h);const k=(0,g.iH)([]);(0,a.JJ)("$connectedAccounts",k);const f=(0,g.iH)(Boolean(h.value&&k.value.length>0));(0,a.JJ)("$connectedAndPermissioned",f);const _=async()=>{Q.log("connecting using json rpc",u.value,"xdai"),n=await new v.ethers.providers.JsonRpcProvider(u.value),Q.log("json rpc provider is",n),n&&(s=await new v.ethers.Contract(x.ZD.default,C.Mt,n),s&&(r.value=!0),n.on("block",(async e=>{Q.log("received block event");const t=await n.getBlock();y.value={timestamp:t.timestamp,blockNumber:e}})))},A=async(e,t,n)=>{try{const a=await p.value.request({method:"wallet_watchAsset",params:{type:"ERC20",options:{address:e,symbol:t,decimals:18,image:n}}});a?Q.log("was added"):Q.log("not added")}catch(a){Q.log(a)}};(0,a.JJ)("$metaMaskAssetAddRequest",A);const M=async(e,t,n,a,o,i,s)=>{let l=!1;try{await ethereum.request({method:"wallet_switchEthereumChain",params:[{chainId:e}]}),Q.log("no error"),l=!0}catch(r){if(Q.log("error is",r),4902===r.code||-32601===r.code)try{l=await p.value.request({method:"wallet_addEthereumChain",params:[{chainId:e,chainName:t,nativeCurrency:{name:n,symbol:a,decimals:18},rpcUrls:o,blockExplorerUrls:i,iconUrls:s}]}),l?Q.log("chain was added"):Q.log("chain not added")}catch(r){Q.log(r),d.value=!0}else Q.log("non switch error",r)}return l};(0,a.JJ)("$metaMaskEthereumChainAddRequest",M);const q=async()=>{"metamask"===l.value?(p.value.on("chainChanged",(e=>{window.location.reload()})),p.value.on("accountsChanged",(()=>{P(!0)}))):"walletconnect"===l.value&&(c.value.on("chainChanged",(e=>{window.location.reload()})),c.value.on("accountsChanged",(()=>{P(!0)})))},L=async(e=null)=>{if(Q.log("wallet connect provider in connectusingwebprovide is",c.value),"walletconnect"===l.value&&c.value.connected)k.value=c.value.accounts,f.value=k.value.length>0;else if("metamask"===l.value&&h.value){Q.log("meta mask installed");try{k.value=await p.value.request({method:"eth_accounts"})}catch(t){return void Q.log(t)}f.value=h.value&&k.value.length>0}f.value?(n=new v.ethers.providers.Web3Provider("metamask"===l.value?p.value:c.value),i=n.getSigner(),Q.log("provider in is",n),m.value=(await n.getNetwork())["chainId"],Q.log("chain id in connect using webprovider is",m.value),s=await new v.ethers.Contract(x.ZD[m.value]||"",C.Mt,i),s&&(r.value=!0),await q(),n.on("block",(async e=>{Q.log("received block event");const t=await n.getBlock();y.value={timestamp:t.timestamp,blockNumber:e}}))):(r.value=!1,n=void 0,i=void 0,s=void 0,Q.log("connecteda"),e?window.location.reload():(n&&n.off("block"),await _()))},P=async(e=null)=>{p.value=await w()(),c.value||(c.value=await W()),h.value=!!p.value&&Boolean(p.value),h.value||c.value.connected?await L(e):await _()};(0,a.bv)((()=>{P()}));const I=async()=>{if(l.value="ethereum",h.value){if(Q.log("ethereum provider",p.value),f.value)return;try{k.value=await p.value.request({method:"eth_requestAccounts"})}catch(e){}f.value=h.value&&k.value.length>0,f.value&&await P(),Q.log(i,"signer value")}else Q.log("please install metamask")};(0,a.JJ)("$connectEthereum",I);const W=async()=>{const e=new F.Z({rpc:x.s5});return o&&await e.enable(),e},$=async()=>{l.value="walletconnect",f.value||(await c.value.enable(),k.value=c.value.accounts,f.value=c.value.connected&&k.value.length>0,f.value&&await P())};(0,a.JJ)("$connectEthereumWalletConnect",$);const S=()=>n;(0,a.JJ)("$getProvider",S);const J=()=>i;(0,a.JJ)("$getSigner",J);const O=()=>f;(0,a.JJ)("$getConnectedAndPermissioned",O);const N=()=>s;(0,a.JJ)("$getLaunchPadContract",N);const R=async(e,t=[])=>{const n=N();return Q.log("launchpad is",n),await n[e](...t)};return(0,a.JJ)("$callLaunchPadFunction",R),{setDarkMode:t,connectEthereum:I,connectEthereumWalletConnect:$,checkExisting:P,getProvider:S,getSigner:J,getLaunchPadContract:N,connectUsingJsonRPCProvider:_,metaMaskEthereumChainAddRequest:M,metamaskInstalled:h,ethereumProvider:p,walletConnectProvider:c,connectedAccounts:k,connectedAndPermissioned:f,launchPadContract:s,launchPadLoaded:r,chainId:m,blockInfo:y,showSwitchChainManual:d}},data(){return{showWalletConnectModal:!1,showNotice:!1}},computed:{darkLightText(){return this.$q.dark.isActive?"light":"dark"},darkLightTextReverse(){return this.$q.dark.isActive?"dark":"light"},connectBtnLabel(){if(Q.log("connected permission",this.connectedAndPermissioned),this.connectedAndPermissioned){let e=this.connectedAccounts[0];return`${e.slice(0,6)}....${e.slice(e.length-4)}`}return this.metamaskInstalled?"Connect":"Install Metamask"}},methods:{connectOrInstallBtn(){if(!this.connectedAndPermissioned)if("Connect"===this.connectBtnLabel)this.showWalletConnectModal=!this.showWalletConnectModal;else{const e=new f.Z;e.startOnboarding()}},async signTx(){Q.log("this signer",this.getSigner(),this.getProvider(),this.ethereumProvider.selectedAddress),Q.log("connected accounts",this.connectedAccounts);const e=await this.getProvider().getBalance("0x9965507D1a55bcC2695C58ba16FB37d819B0A4dc");Q.log("response is",e,this.$ethers.utils.formatEther(e),e._isBigNumber)},async callContract(){const e=this.getLaunchPadContract(),t=await e.getProposals("0");Q.log("get proposals",t);const n={address:e.address,topic:Object.values(e.filters)};e.on(n,(e=>{Q.log("result in event is",e)})),Q.log("ilo contract",e,t)}},mounted(){Q.log("get provider",this.getProvider());try{this.showNotice=!this.$q.sessionStorage.getItem("accRK")}catch(e){Q.log("error occurred reading from session",e),this.showNotice=!0}},watch:{jsonRPCEndpoint:async function(){await this.checkExisting(!1)}}});var z=n(83066),X=n(53812),K=n(39570),Y=n(13747),ee=n(57547),te=n(42770),ne=n(69721),ae=n(72652),oe=n(41762),ie=n(75096);G.render=h;const se=G;N()(G,"components",{QLayout:z.Z,QHeader:X.Z,QToolbar:K.Z,QToolbarTitle:Y.Z,QBtn:S.Z,QTabs:ee.Z,QRouteTab:te.Z,QBadge:ne.Z,QPageContainer:ae.Z,QFooter:oe.Z,QAvatar:ie.Z})},37400:(e,t,n)=>{e.exports=n.p+"img/xstarter_dark_logo.3c81782b.png"},56607:(e,t,n)=>{e.exports=n.p+"img/xstarter_light_logo.2f86b50b.png"},36563:()=>{}}]);